
R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "RAQSAPI"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> base::assign(".ExTimings", "RAQSAPI-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('RAQSAPI')
Use the function
                      RAQSAPI::aqs_credentials(username, key)
                      before using other RAQSAPI functions
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("aqs_annualsummary_by_box")
> ### * aqs_annualsummary_by_box
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_annualsummary_by_box
> ### Title: aqs_annualsummary_by_box
> ### Aliases: aqs_annualsummary_by_box
> 
> ### ** Examples
> 
> # returns a tibble containing ozone annual summaries
>           #  in the vicinity of central Alabama for the first two days
>           #  in May, 2015
>           ## Not run: 
> ##D aqs_annualsummary_by_box(parameter = "44201",
> ##D                                             bdate = as.Date("20150501",
> ##D                                                           format = "%Y%m%d"),
> ##D                                             edate = as.Date("20170502",
> ##D                                                           format = "%Y%m%d"),
> ##D                                             minlat = "33.3",
> ##D                                             maxlat = "33.6",
> ##D                                             minlon = "-87.0",
> ##D                                             maxlon = "-86.7"
> ##D                                             )
> ##D                    
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_annualsummary_by_box", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_annualsummary_by_cbsa")
> ### * aqs_annualsummary_by_cbsa
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_annualsummary_by_cbsa
> ### Title: aqs_annualsummary_by_cbsa
> ### Aliases: aqs_annualsummary_by_cbsa
> 
> ### ** Examples
> 
> # returns a tibble of annual sunnary NO2
>           #  data the for Charlotte-Concord-Gastonia, NC cbsa for
>           #  Janurary 01, 2017
>           ## Not run: 
> ##D aqs_annualsummary_by_cbsa(parameter = "42602",
> ##D                                              bdate = as.Date("20170101",
> ##D                                                             format = "%Y%m%d"
> ##D                                                             ),
> ##D                                              edate = as.Date("20170101",
> ##D                                                             format = "%Y%m%d"
> ##D                                                             ),
> ##D                                              cbsa_code = "16740"
> ##D                                              )
> ##D                    
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_annualsummary_by_cbsa", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_annualsummary_by_county")
> ### * aqs_annualsummary_by_county
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_annualsummary_by_county
> ### Title: aqs_annualsummary_by_county
> ### Aliases: aqs_annualsummary_by_county
> 
> ### ** Examples
> 
> # returns an aqs S3 object with annual summary FRM/FEM
>           #  PM2.5 data for Wake County, NC between January
>           #  and February 2016
>  ## Not run: 
> ##D aqs_annualsummary_by_county(parameter = "88101",
> ##D                                       bdate = as.Date("20160101",
> ##D                                                       format = "%Y%m%d"),
> ##D                                        edate = as.Date("20180228",
> ##D                                                       format = "%Y%m%d"),
> ##D                                        stateFIPS = "37",
> ##D                                        countycode = "183"
> ##D                                        )
> ##D          
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_annualsummary_by_county", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_annualsummary_by_site")
> ### * aqs_annualsummary_by_site
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_annualsummary_by_site
> ### Title: aqs_annualsummary_by_site
> ### Aliases: aqs_annualsummary_by_site
> 
> ### ** Examples
> 
> # Returns a tibble of annual summary ozone
>           #  data for the Millbrook School site (\#0014) in Wake County,
>           #  NC for 2017 (Note, for annual data, only the
>           #  year portion of the bdate and edate are used and only whole
>           #  years of data are returned. For example, bdate = 2017-12-31 and
>           #  edate = 2018-01-01 will return full data for 2017 and 2018 )
>  ## Not run: 
> ##D           aqs_annualsummary_by_site(parameter = "44201",
> ##D                                     bdate = as.Date("20170618",
> ##D                                                     format="%Y%m%d"),
> ##D                                     edate = as.Date("20190618",
> ##D                                                     format="%Y%m%d"),
> ##D                                     stateFIPS = "37",
> ##D                                     countycode = "183",
> ##D                                     sitenum = "0014"
> ##D                                    )
> ##D           
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_annualsummary_by_site", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_annualsummary_by_state")
> ### * aqs_annualsummary_by_state
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_annualsummary_by_state
> ### Title: aqs_annualsummary_by_state
> ### Aliases: aqs_annualsummary_by_state
> 
> ### ** Examples
> 
> # returns a tibble of all benzene annualy
>           #  summaries from North Carolina collected for 1995
>           ## Not run: 
> ##D aqs_annualsummary_by_state(parameter = "45201",
> ##D                                               bdate = as.Date("19950515",
> ##D                                                               format="%Y%m%d"
> ##D                                                               ),
> ##D                                               edate = as.Date("19950515",
> ##D                                                             format = "%Y%m%d"
> ##D                                                              ),
> ##D                                               stateFIPS = "37"
> ##D                                               )
> ##D                    
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_annualsummary_by_state", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_cbsas")
> ### * aqs_cbsas
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_cbsas
> ### Title: aqs_cbsas
> ### Aliases: aqs_cbsas
> 
> ### ** Examples
> 
> #returns a tibble or an AQS_Data Mart_APIv2 S3 object of cbsas
>           #  and their respective cbsa codes
>           ## Not run:  aqs_cbsas() 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_cbsas", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_classes")
> ### * aqs_classes
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_classes
> ### Title: aqs_classes
> ### Aliases: aqs_classes
> 
> ### ** Examples
> 
> #returns a tibble or an AQS_Data Mart_APIv2 S3 object of
>           #  parameter classes (groups of parameters, i.e. "criteria" or
>           #  all")
>          ## Not run:  aqs_classes() 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_classes", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_counties_by_state")
> ### * aqs_counties_by_state
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_counties_by_state
> ### Title: aqs_counties_by_state
> ### Aliases: aqs_counties_by_state
> 
> ### ** Examples
> 
>           #returns an tibble all the counties
>           #   in North Carolina the county FIPS codes (county codes) for
>           #   each.
>           ## Not run: aqs_counties_by_state(stateFIPS = "37")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_counties_by_state", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_credentials")
> ### * aqs_credentials
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_credentials
> ### Title: aqs_credentials
> ### Aliases: aqs_credentials
> 
> ### ** Examples
> 
>  #to authenticate an existing user the email address
>  # "John.Doe@myemail.com" and key = "MyKey"
>  #  after calling this function please follow the instructions that are sent
>  #  in the verification e-mail before proceeding.
>  ## Not run: 
> ##D aqs_credentials(username = "John.Doe@myemail.com",
> ##D                               key = "MyKey")
> ##D          
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_credentials", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_dailysummary_by_box")
> ### * aqs_dailysummary_by_box
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_dailysummary_by_box
> ### Title: aqs_dailysummary_by_box
> ### Aliases: aqs_dailysummary_by_box
> 
> ### ** Examples
> 
> #returns a tibble of ozone daily summaries in the vicinity of
>          #  central Alabama for the first two days in May 2015
> 
>           ## Not run: 
> ##D aqs_dailysummary_by_box(parameter = "44201",
> ##D                                            bdate = as.Date("20140501",
> ##D                                                            format = "%Y%m%d"
> ##D                                                           ),
> ##D                                             edate = as.Date("20160502",
> ##D                                                             format = "%Y%m%d"
> ##D                                                             ),
> ##D                                             mqinlat ="33.3",
> ##D                                             maxlat = "33.6",
> ##D                                             minlon = "-87.0",
> ##D                                             maxlon = "-86.7"
> ##D                                             )
> ##D                    
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_dailysummary_by_box", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_dailysummary_by_cbsa")
> ### * aqs_dailysummary_by_cbsa
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_dailysummary_by_cbsa
> ### Title: aqs_dailysummary_by_cbsa
> ### Aliases: aqs_dailysummary_by_cbsa
> 
> ### ** Examples
> 
> # returns a tibble of daily sunnary NO2
>           #  data the for Charlotte-Concord-Gastonia, NC cbsa for
>           #  Janurary 01, 2017
>           ## Not run: 
> ##D aqs_dailysummary_by_cbsa(parameter = "42602",
> ##D                                                bdate = as.Date("20170101",
> ##D                                                             format = "%Y%m%d"
> ##D                                                               ),
> ##D                                                edate = as.Date("20190101",
> ##D                                                             format = "%Y%m%d"
> ##D                                                               ),
> ##D                                                cbsa_code = "16740"
> ##D                                            )
> ##D                    
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_dailysummary_by_cbsa", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_dailysummary_by_county")
> ### * aqs_dailysummary_by_county
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_dailysummary_by_county
> ### Title: aqs_dailysummary_by_county
> ### Aliases: aqs_dailysummary_by_county
> 
> ### ** Examples
> 
> # returns an aqs S3 object of daily summary FRM/FEM PM2.5 data
>           #  for Wake County, NC between January and February 2016
>  ## Not run: 
> ##D aqs_dailysummary_by_county(parameter = "88101",
> ##D                                      bdate = as.Date("20160101",
> ##D                                                    format = "%Y%m%d"),
> ##D                                      edate = as.Date("20170228",
> ##D                                                      format = "%Y%m%d"),
> ##D                                      stateFIPS = "37",
> ##D                                      countycode = "183"
> ##D                                     )
> ##D          
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_dailysummary_by_county", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_dailysummary_by_site")
> ### * aqs_dailysummary_by_site
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_dailysummary_by_site
> ### Title: aqs_dailysummary_by_site
> ### Aliases: aqs_dailysummary_by_site
> 
> ### ** Examples
> 
> #Returns a tibble of daily summary ozone
>           #  data for the Millbrook School site (\#0014) in Wake County,
>           #  NC for June 18, 2017.
>  ## Not run: 
> ##D              aqs_dailysummary_by_site(parameter = "44201",
> ##D                                       bdate = as.Date("20160618",
> ##D                                                       format = "%Y%m%d"),
> ##D                                       edate = as.Date("20190618",
> ##D                                                       format = "%Y%m%d"),
> ##D                                       stateFIPS = "37",
> ##D                                       countycode = "183",
> ##D                                      sitenum = "0014"
> ##D                                      )
> ##D          
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_dailysummary_by_site", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_dailysummary_by_state")
> ### * aqs_dailysummary_by_state
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_dailysummary_by_state
> ### Title: aqs_dailysummary_by_state
> ### Aliases: aqs_dailysummary_by_state
> 
> ### ** Examples
> 
> # returns a tibble of all benzene daily
>           #  summaries from North Carolina collected on May 15th, 1995
>           ## Not run: 
> ##D aqs_dailysummary_by_state(parameter = "45201",
> ##D                                              bdate = as.Date("19950515",
> ##D                                                              format="%Y%m%d"
> ##D                                                              ),
> ##D                                              edate = as.Date("19970515",
> ##D                                                             format = "%Y%m%d"
> ##D                                                              ),
> ##D                                              stateFIPS = "37"
> ##D                                              )
> ##D                    
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_dailysummary_by_state", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_fields_by_service")
> ### * aqs_fields_by_service
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_fields_by_service
> ### Title: aqs_fieldsbyservice
> ### Aliases: aqs_fields_by_service
> 
> ### ** Examples
> 
> # Returns a tibble containing a list and definitions
>          #  of fields in the Sample Data service
>          ## Not run: aqs_fieldsbyservice(service = "sampleData")
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_fields_by_service", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_isavailable")
> ### * aqs_isavailable
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_isavailable
> ### Title: aqs_isavailable
> ### Aliases: aqs_isavailable
> 
> ### ** Examples
> 
>   #check if the AQS API is up, running and accepting requests.
>   ## Not run:  aqs_isAvailable() 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_isavailable", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_knownissues")
> ### * aqs_knownissues
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_knownissues
> ### Title: aqs_knownissues
> ### Aliases: aqs_knownissues
> 
> ### ** Examples
> 
>       #retrieve the list of known issues directly from the AQS data mart API
>        ## Not run: aqs_knownissues()
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_knownissues", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_mas")
> ### * aqs_mas
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_mas
> ### Title: aqs_mas
> ### Aliases: aqs_mas
> 
> ### ** Examples
> 
> #returns a tibble or an AQS_Data Mart_APIv2 S3 object
>           #   of monitoring agencies and their respective
>           #   monitoring agency codes.
>           ## Not run: aqs_mas()
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_mas", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_monitors_by_box")
> ### * aqs_monitors_by_box
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_monitors_by_box
> ### Title: aqs_monitors_by_box
> ### Aliases: aqs_monitors_by_box
> 
> ### ** Examples
> 
> #  returns a tibble of all ozone
>           #  monitors in the vicinity of central Alabama that operated in
>           #  1995
>           ## Not run: 
> ##D aqs_monitors_by_box(parameter="44201",
> ##D                                                bdate=as.Date("19950101",
> ##D                                                            format="%Y%m%d"),
> ##D                                                edate=as.Date("19951231",
> ##D                                                             format="%Y%m%d"),
> ##D                                                minlat="33.3",
> ##D                                                maxlat="33.6",
> ##D                                                minlon="-87.0",
> ##D                                                maxlon="-86.7"
> ##D                                                    )
> ##D                    
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_monitors_by_box", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_monitors_by_cbsa")
> ### * aqs_monitors_by_cbsa
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_monitors_by_cbsa
> ### Title: aqs_monitors_by_cbsa
> ### Aliases: aqs_monitors_by_cbsa
> 
> ### ** Examples
> 
> # returns a tibble of NO2 monitors
>           #  for Charlotte-Concord-Gastonia, NC cbsa that were operating
>           #  on Janurary 01, 2017
>           ## Not run: 
> ##D aqs_monitors_by_cbsa(parameter="42602",
> ##D                                                bdate=as.Date("20170101",
> ##D                                                            format="%Y%m%d"),
> ##D                                                edate=as.Date("20170101",
> ##D                                                             format="%Y%m%d"),
> ##D                                                cbsa_code="16740"
> ##D                                                    )
> ##D                    
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_monitors_by_cbsa", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_monitors_by_county")
> ### * aqs_monitors_by_county
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_monitors_by_county
> ### Title: aqs_monitors_by_county
> ### Aliases: aqs_monitors_by_county
> 
> ### ** Examples
> 
> # returns an aqs_v2 S3 object containing all SO2 monitors in
>           #  Hawaii County, HI that were operating on May 01, 2015.
>  ## Not run: 
> ##D aqs_monitors_by_county(parameter="42401",
> ##D                                  bdate=as.Date("20150501", format="%Y%m%d"),
> ##D                                  edate=as.Date("20150502", format="%Y%m%d"),
> ##D                                  stateFIPS="15",
> ##D                                  countycode="001"
> ##D                                  )
> ##D          
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_monitors_by_county", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_monitors_by_site")
> ### * aqs_monitors_by_site
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_monitors_by_site
> ### Title: aqs_monitors_by_site
> ### Aliases: aqs_monitors_by_site
> 
> ### ** Examples
> 
>  #Returns a tibble of the SO2 monitors at Hawaii
>  #  Volcanoes NP site (\#0007) in Hawaii County, HI that were operating on
>  #  May 1 , 2015. (Note, all monitors that operated between the bdate and
>  #  edate will be returned)
>  ## Not run: 
> ##D            aqs_monitors_by_site(parameter = "42401",
> ##D                                   bdate = as.Date("20150501",
> ##D                                                      format="%Y%m%d"),
> ##D                                   edate = as.Date("20150502",
> ##D                                                      format="%Y%m%d"),
> ##D                                   stateFIPS = "15",
> ##D                                   countycode = "001",
> ##D                                   sitenum = "0007"
> ##D                                  )
> ##D          
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_monitors_by_site", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_monitors_by_state")
> ### * aqs_monitors_by_state
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_monitors_by_state
> ### Title: aqs_monitors_by_state
> ### Aliases: aqs_monitors_by_state
> 
> ### ** Examples
> 
> # returns a tibble of SO2 monitors in Hawaii
>           #  that were operating on May 01, 2015
>  ## Not run: 
> ##D aqs_monitors_by_state(parameter="88101",
> ##D                                   bdate=as.Date("20170101",
> ##D                                                  format="%Y%m%d"),
> ##D                                   edate=as.Date("20171231",
> ##D                                                  format="%Y%m%d"),
> ##D                                   stateFIPS="01"
> ##D                                   )
> ##D           
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_monitors_by_state", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_parameters_by_class")
> ### * aqs_parameters_by_class
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_parameters_by_class
> ### Title: aqs_parameters_by_class
> ### Aliases: aqs_parameters_by_class
> 
> ### ** Examples
> 
> # Returns a tibble of AQS parameters in the criteria class
>           ## Not run:  aqs_parameters_by_class(class = "CRITERIA") 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_parameters_by_class", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_pqaos")
> ### * aqs_pqaos
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_pqaos
> ### Title: aqs_pqaos
> ### Aliases: aqs_pqaos
> 
> ### ** Examples
> 
> #To retrieve a tibble of primary quality assurance
>           #  organizations (pqaos)
>            ## Not run:  pqaos <- aqs_pqaos() 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_pqaos", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_qa_blanks_by_MA")
> ### * aqs_qa_blanks_by_MA
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_qa_blanks_by_MA
> ### Title: aqs_qa_blanks_by_MA
> ### Aliases: aqs_qa_blanks_by_MA
> 
> ### ** Examples
> 
> # returns a tibble containing PM2.5 blank data for
>            #  January 2018 where the Monitoring Agency is the Alabama
>            #  Department of Environmental Management (agency 0013)
>           ## Not run: 
> ##D aqs_qa_blanks_by_MA(parameter = "88101",
> ##D                                        bdate = as.Date("20170101",
> ##D                                                        format = "%Y%m%d"),
> ##D                                        edate = as.Date("20190131",
> ##D                                                        format = "%Y%m%d"),
> ##D                                        MA_code = "0013"
> ##D                                        )
> ##D                    
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_qa_blanks_by_MA", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_qa_blanks_by_county")
> ### * aqs_qa_blanks_by_county
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_qa_blanks_by_county
> ### Title: aqs_qa_blanks_by_county
> ### Aliases: aqs_qa_blanks_by_county
> 
> ### ** Examples
> 
> # returns an tibble with PM2.5 blank data for
>           #  Colbert County, AL for January 2018
>    ## Not run: 
> ##D aqs_qa_blanks_by_county(parameter = "88101",
> ##D                                     bdate = as.Date("20170101",
> ##D                                                    format="%Y%m%d"),
> ##D                                     edate = as.Date("20190131",
> ##D                                                     format="%Y%m%d"),
> ##D                                     stateFIPS = "01",
> ##D                                     countycode = "033"
> ##D                                    )
> ##D            
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_qa_blanks_by_county", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_qa_blanks_by_pqao")
> ### * aqs_qa_blanks_by_pqao
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_qa_blanks_by_pqao
> ### Title: aqs_qa_blanks_by_pqao
> ### Aliases: aqs_qa_blanks_by_pqao
> 
> ### ** Examples
> 
> # returns tibble of PM2.5 blank data for
>           #  January 2018 where the PQAO is the Alabama Department of
>           #  Environmental Management (agency 0013)
>           ## Not run: 
> ##D aqs_qa_blanks_by_pqao(parameter = "88101",
> ##D                                          bdate = as.Date("20180101",
> ##D                                                          format = "%Y%m%d"),
> ##D                                          edate = as.Date("20180131",
> ##D                                                          format = "%Y%m%d"),
> ##D                                          pqao_code = "0013"
> ##D                                          )
> ##D                    
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_qa_blanks_by_pqao", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_qa_blanks_by_site")
> ### * aqs_qa_blanks_by_site
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_qa_blanks_by_site
> ### Title: aqs_qa_blanks_by_site
> ### Aliases: aqs_qa_blanks_by_site
> 
> ### ** Examples
> 
> #Returns a tibble of PM2.5 blank
>           #  data for the Muscle Shoals site (#0014) in Colbert County, AL
>           #  for January 2018
>           ## Not run: 
> ##D                     aqs_qa_blanks_by_site(parameter = "88101",
> ##D                                           bdate = as.Date("20170101",
> ##D                                                           format="%Y%m%d"),
> ##D                                           edate = as.Date("20190131",
> ##D                                                           format="%Y%m%d"),
> ##D                                           stateFIPS = "01",
> ##D                                           countycode = "033",
> ##D                                           sitenum = "1002"
> ##D                                           )
> ##D                  
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_qa_blanks_by_site", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_qa_blanks_by_state")
> ### * aqs_qa_blanks_by_state
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_qa_blanks_by_state
> ### Title: aqs_qa_blanks_by_state
> ### Aliases: aqs_qa_blanks_by_state
> 
> ### ** Examples
> 
> # returns a aqs_v2 object which contains PM2.5 blank data
>           #  for Alabama for January 2018
>           ## Not run: 
> ##D aqs_qa_blanks_by_state(parameter = "88101",
> ##D                                           bdate = as.Date("20180101",
> ##D                                                           format = "%Y%m%d"
> ##D                                                          ),
> ##D                                           edate = as.Date("20180131",
> ##D                                           format = "%Y%m%d"),
> ##D                                           stateFIPS = "01"
> ##D                                           )
> ##D                    
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_qa_blanks_by_state", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_qa_collocated_assessments_by_MA")
> ### * aqs_qa_collocated_assessments_by_MA
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_qa_collocated_assessments_by_MA
> ### Title: aqs_qa_collocated_assessments_by_MA
> ### Aliases: aqs_qa_collocated_assessments_by_MA
> 
> ### ** Examples
> 
> # returns a tibble containing collocated assessment
>           #  data for FRM PM2.5 January 2013 where the Monitoring Agency is
>           #  the Alabama Department of Environmental Management (agency 0013)
>           ## Not run: 
> ##D aqs_qa_collocated_assessments_by_MA(parameter="88101",
> ##D                                                   bdate = as.Date("20130101",
> ##D                                                           format = "%Y%m%d"),
> ##D                                                   edate = as.Date("20150131",
> ##D                                                             format="%Y%m%d"),
> ##D                                                   MA_code = "0013"
> ##D                                                        )
> ##D                    
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_qa_collocated_assessments_by_MA", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_qa_collocated_assessments_by_county")
> ### * aqs_qa_collocated_assessments_by_county
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_qa_collocated_assessments_by_county
> ### Title: aqs_qa_collocated_assessments_by_county
> ### Aliases: aqs_qa_collocated_assessments_by_county
> 
> ### ** Examples
> 
> # returns a tibble with collocated assessment data
>           #  for FRM PM2.5 in Madison County, AL for January 2013
>  ## Not run: 
> ##D aqs_qa_collocated_assessments_by_county(parameter = "88101",
> ##D                                                   bdate = as.Date("20130101",
> ##D                                                             format = "%Y%m%d"
> ##D                                                                  ),
> ##D                                                   edate = as.Date("20150131",
> ##D                                                             format = "%Y%m%d"
> ##D                                                                  ),
> ##D                                                   stateFIPS = "01",
> ##D                                                   countycode = "089"
> ##D                                                   )
> ##D          
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_qa_collocated_assessments_by_county", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_qa_collocated_assessments_by_pqao")
> ### * aqs_qa_collocated_assessments_by_pqao
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_qa_collocated_assessments_by_pqao
> ### Title: aqs_qa_collocated_assessments_by_pqao
> ### Aliases: aqs_qa_collocated_assessments_by_pqao
> 
> ### ** Examples
> 
> # returns a tibble of collocated assessment
>           #  data for FRM PM2.5 January 2013 where the PQAO is the Alabama
>           #  Department of Environmental Management (agency 0013)
>           ## Not run: 
> ##D aqs_qa_collocated_assessments_by_pqao(parameter = "88101",
> ##D                                                   bdate = as.Date("20130101",
> ##D                                                           format = "%Y%m%d"),
> ##D                                                   edate = as.Date("20150131",
> ##D                                                           format = "%Y%m%d"),
> ##D                                                         pqao_code = "0013"
> ##D                                                         )
> ##D                    
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_qa_collocated_assessments_by_pqao", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_qa_collocated_assessments_by_site")
> ### * aqs_qa_collocated_assessments_by_site
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_qa_collocated_assessments_by_site
> ### Title: aqs_qa_collocated_assessments_by_site
> ### Aliases: aqs_qa_collocated_assessments_by_site
> 
> ### ** Examples
> 
> #returns a tibble of collocated assessment data
>           #  for FRM PM2.5 at the Huntsville Old Airport site (\#0014)
>           #  in Madison County, AL for January 2013:
>  ## Not run: 
> ##D aqs_qa_collocated_assessments_by_site(parameter = "88101",
> ##D                                                 bdate = as.Date("20130101",
> ##D                                                             format = "%Y%m%d"
> ##D                                                                ),
> ##D                                                 edate = as.Date("20150131",
> ##D                                                             format = "%Y%m%d"
> ##D                                                                 ),
> ##D                                                 stateFIPS = "01",
> ##D                                                 countycode = "089",
> ##D                                                 sitenum = "0014"
> ##D                                                 )
> ##D          
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_qa_collocated_assessments_by_site", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_qa_collocated_assessments_by_state")
> ### * aqs_qa_collocated_assessments_by_state
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_qa_collocated_assessments_by_state
> ### Title: aqs_qa_collocated_assessments_by_state
> ### Aliases: aqs_qa_collocated_assessments_by_state
> 
> ### ** Examples
> 
> # returns a tibble  of collocated
>           #  assessment data fofr FRM2.5 for January 2013
>           ## Not run: 
> ##D aqs_qa_collocated_assessments_by_state(parameter="88101",
> ##D                                                   bdate = as.Date("20130101",
> ##D                                                             format = "%Y%m%d"
> ##D                                                                  ),
> ##D                                                   edate = as.Date("20150131",
> ##D                                                             format = "%Y%m%d"
> ##D                                                                  ),
> ##D                                                              stateFIPS = "01"
> ##D                                                           )
> ##D                    
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_qa_collocated_assessments_by_state", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_qa_flowrateaudit_by_MA")
> ### * aqs_qa_flowrateaudit_by_MA
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_qa_flowrateaudit_by_MA
> ### Title: aqs_qa_flowrateaudit_by_MA
> ### Aliases: aqs_qa_flowrateaudit_by_MA
> 
> ### ** Examples
> 
> # returns a tibble of flow rate audit data
>  #  for FRM PM2.5 January 2016 - Januray 2018 where the Monitoring Agency is
>  #  the Jefferson County, AL  Department of Health (agency 0550)
>  ## Not run: 
> ##D aqs_qa_flowrateaudit_by_MA(parameter = "88101",
> ##D                                      bdate = as.Date("20160101",
> ##D                                                   format = "%Y%m%d"),
> ##D                                      edate = as.Date("20180131",
> ##D                                                      format = "%Y%m%d"),
> ##D                                      MA_code = "0550"
> ##D                                      )
> ##D          
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_qa_flowrateaudit_by_MA", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_qa_flowrateaudit_by_county")
> ### * aqs_qa_flowrateaudit_by_county
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_qa_flowrateaudit_by_county
> ### Title: aqs_qa_flowrateaudit_by_county
> ### Aliases: aqs_qa_flowrateaudit_by_county
> 
> ### ** Examples
> 
> #Returns a tibble of flow rate audit data for
>           #  Jefferson County, AL for January 2018
>    ## Not run: 
> ##D aqs_qa_flowrateaudit_by_county(parameter = "88101",
> ##D                                            bdate = as.Date("20170101",
> ##D                                                          format="%Y%m%d"),
> ##D                                            edate = as.Date("20190131",
> ##D                                                          format = "%Y%m%d"),
> ##D                                            tateFIPS = "01",
> ##D                                            countycode = "073"
> ##D                                            )
> ##D            
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_qa_flowrateaudit_by_county", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_qa_flowrateaudit_by_pqao")
> ### * aqs_qa_flowrateaudit_by_pqao
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_qa_flowrateaudit_by_pqao
> ### Title: aqs_qa_flowrateaudit_by_pqao
> ### Aliases: aqs_qa_flowrateaudit_by_pqao
> 
> ### ** Examples
> 
> # returns a tibble of flow rate audit data for January
>   #  2018 where the PQAO is the Jefferson County, AL Department Of
>   #  Health (agency 0550).
>   ## Not run: 
> ##D aqs_qa_flowrateaudit_by_pqao(parameter = "88101",
> ##D                                         bdate = as.Date("20170101",
> ##D                                                         format = "%Y%m%d"),
> ##D                                         edate = as.Date("20180131",
> ##D                                                         format = "%Y%m%d"),
> ##D                                         pqao_code = "0550"
> ##D                                        )
> ##D           
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_qa_flowrateaudit_by_pqao", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_qa_flowrateaudit_by_site")
> ### * aqs_qa_flowrateaudit_by_site
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_qa_flowrateaudit_by_site
> ### Title: aqs_qa_flowrate audit_by_site
> ### Aliases: aqs_qa_flowrateaudit_by_site
> 
> ### ** Examples
> 
> # returns a tibble of flow rate audit data
>           #  for the Wylam site (#2003) in Jefferson County, AL
>           #  for January 2018:
>  ## Not run: 
> ##D aqs_qa_flowrateaudit_by_site(parameter = "88101",
> ##D                                                  bdate = as.Date("20150101",
> ##D                                                             format="%Y%m%d"),
> ##D                                                  edate = as.Date("20180131",
> ##D                                                             format="%Y%m%d"),
> ##D                                                  stateFIPS = "01",
> ##D                                                  countycode = "073",
> ##D                                                  sitenum = "2003"
> ##D                                                  )
> ##D            
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_qa_flowrateaudit_by_site", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_qa_flowrateaudit_by_state")
> ### * aqs_qa_flowrateaudit_by_state
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_qa_flowrateaudit_by_state
> ### Title: aqs_qa_flowrateaudit_by_state
> ### Aliases: aqs_qa_flowrateaudit_by_state
> 
> ### ** Examples
> 
> # returns a tibble of flow rate audit
>           #  data for Alabama in January 2018
>           ## Not run: 
> ##D aqs_qa_flowrateaudit_by_state(parameter = "88101",
> ##D                                                  b date = as.Date("20170101",
> ##D                                                             format = "%Y%m%d"
> ##D                                                                 ),
> ##D                                                   edate = as.Date("20180131",
> ##D                                                             format = "%Y%m%d"
> ##D                                                                 ),
> ##D                                                  stateFIPS = "01"
> ##D                                                  )
> ##D                    
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_qa_flowrateaudit_by_state", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_qa_flowrateverification_by_MA")
> ### * aqs_qa_flowrateverification_by_MA
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_qa_flowrateverification_by_MA
> ### Title: aqs_qa_flowrateverification_by_MA
> ### Aliases: aqs_qa_flowrateverification_by_MA
> 
> ### ** Examples
> 
> # returns a tibble containing collocated assessment
>   #  data for FRM PM2.5 January 2013 where the Monitoring Agency is
>   #  the Alabama Department of Environmental Management (agency 0013)
>   ## Not run: 
> ##D aqs_qa_flowrateverification_by_MA(parameter = "88101",
> ##D                                              bdate = as.Date("20130101",
> ##D                                                             format = "%Y%m%d"
> ##D                                                             ),
> ##D                                              edate = as.Date("20150131",
> ##D                                                            format = "%Y%m%d"
> ##D                                                             ),
> ##D                                              MA_code = "0013"
> ##D                                              )
> ##D           
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_qa_flowrateverification_by_MA", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_qa_flowrateverification_by_county")
> ### * aqs_qa_flowrateverification_by_county
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_qa_flowrateverification_by_county
> ### Title: aqs_qa_flowrateverification_by_county
> ### Aliases: aqs_qa_flowrateverification_by_county
> 
> ### ** Examples
> 
> # returns a tibble of flow rate verification data for
>           #  Colbert County, AL for January 2018
>   ## Not run: 
> ##D aqs_qa_flowrateverification_by_county(parameter = "88101",
> ##D                                                  bdate = as.Date("20180101",
> ##D                                                             format = "%Y%m%d"
> ##D                                                                  ),
> ##D                                                  edate = as.Date("20190131",
> ##D                                                             format = "%Y%m%d"
> ##D                                                                 ),
> ##D                                                  stateFIPS = "01",
> ##D                                                  countycode = "033"
> ##D                                                    )
> ##D            
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_qa_flowrateverification_by_county", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_qa_flowrateverification_by_pqao")
> ### * aqs_qa_flowrateverification_by_pqao
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_qa_flowrateverification_by_pqao
> ### Title: aqs_qa_flowrateverification_by_pqao
> ### Aliases: aqs_qa_flowrateverification_by_pqao
> 
> ### ** Examples
> 
> # returns a tibble of flow rate verification
>   #  data for January 2018 where the PQAO is the Alabama Department
>   #  of Environmental Management (agency 0013)
>   ## Not run: 
> ##D aqs_qa_flowrateverification_by_pqao(parameter = "88101",
> ##D                                                bdate = as.Date("20170101",
> ##D                                                             format = "%Y%m%d"
> ##D                                                               ),
> ##D                                                edate = as.Date("20190131",
> ##D                                                             format = "%Y%m%d"
> ##D                                                               ),
> ##D                                                pqao_code = "0013"
> ##D                                                )
> ##D          
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_qa_flowrateverification_by_pqao", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_qa_flowrateverification_by_site")
> ### * aqs_qa_flowrateverification_by_site
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_qa_flowrateverification_by_site
> ### Title: aqs_qa_flowrateverification_by_site
> ### Aliases: aqs_qa_flowrateverification_by_site
> 
> ### ** Examples
> 
> # returns a tibble of flow rate verification
>           #  data for the Muscle Shoals site (#0014) in Colbert County, AL
>           #  for January 2018:
>  ## Not run: 
> ##D aqs_qa_flowrateverification_by_site(parameter = "88101",
> ##D                                               bdate = as.Date("20170101",
> ##D                                                          format = "%Y%m%d"),
> ##D                                               edate = as.Date("20180131",
> ##D                                                          format = "%Y%m%d"),
> ##D                                              stateFIPS = "01",
> ##D                                              countycode = "033",
> ##D                                              sitenum = "1002"
> ##D                                                )
> ##D           
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_qa_flowrateverification_by_site", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_qa_flowrateverification_by_state")
> ### * aqs_qa_flowrateverification_by_state
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_qa_flowrateverification_by_state
> ### Title: aqs_qa_flowrateverification_by_state
> ### Aliases: aqs_qa_flowrateverification_by_state
> 
> ### ** Examples
> 
> # returns a tibble of flow rate verification
>           #  data for Alabama 2018
>           ## Not run: 
> ##D aqs_qa_flowrateverification_by_state(parameter = "88101",
> ##D                                                   bdate = as.Date("20170101",
> ##D                                                             format = "%Y%m%d"
> ##D                                                                   ),
> ##D                                                   edate = as.Date("20190131",
> ##D                                                               format="%Y%m%d"
> ##D                                                                   ),
> ##D                                                   stateFIPS = "01"
> ##D                                                         )
> ##D                    
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_qa_flowrateverification_by_state", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_qa_one_point_qc_by_MA")
> ### * aqs_qa_one_point_qc_by_MA
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_qa_one_point_qc_by_MA
> ### Title: aqs_qa_one_point_qc_by_MA
> ### Aliases: aqs_qa_one_point_qc_by_MA
> 
> ### ** Examples
> 
> # returns a tibble of ozone One Point QC data
>           #  for January 2018 where the Monitoring Agency is the
>           #  Massachusetts Department of Environmental Protection
>           #  (agency 0660)
>           ## Not run: 
> ##D aqs_qa_one_point_qc_by_MA(parameter = "44201",
> ##D                                              bdate = as.Date("20170101",
> ##D                                                           format = "%Y%m%d"),
> ##D                                              edate = as.Date("20180131",
> ##D                                                           format = "%Y%m%d"),
> ##D                                              MA_code = "0660"
> ##D                                             )
> ##D                    
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_qa_one_point_qc_by_MA", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_qa_one_point_qc_by_county")
> ### * aqs_qa_one_point_qc_by_county
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_qa_one_point_qc_by_county
> ### Title: aqs_qa_one_point_qc_by_county_
> ### Aliases: aqs_qa_one_point_qc_by_county
> 
> ### ** Examples
> 
> #returns a tibble of One Point QC data for ozone
>           #  in Barnstable County, MA for January 2018
>   ## Not run: 
> ##D aqs_qa_one_point_qc_by_county(parameter= "44201",
> ##D                                          bdate = as.Date("20170101",
> ##D                                                        format = "%Y%m%d"),
> ##D                                          edate = a s.Date("20180131",
> ##D                                                          format = "%Y%m%d"),
> ##D                                          stateFIPS = "25",
> ##D                                          countycode = "001"
> ##D                                          )
> ##D            
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_qa_one_point_qc_by_county", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_qa_one_point_qc_by_pqao")
> ### * aqs_qa_one_point_qc_by_pqao
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_qa_one_point_qc_by_pqao
> ### Title: aqs_qa_one_point_qc_by_pqao
> ### Aliases: aqs_qa_one_point_qc_by_pqao
> 
> ### ** Examples
> 
>  # returns a tibble of ozone One Point QC
>  #  data for Jan 2017 - January 2018 where the PQAO is the Massachusetts
>  #  Department of Environmental Protection (agency 0660)
>  ## Not run: 
> ##D aqs_qa_one_point_qc_by_pqao(parameter = "88101",
> ##D                                       bdate = as.Date("20170101",
> ##D                                                       format = "%Y%m%d"),
> ##D                                       edate = as.Date("20180131",
> ##D                                                     format = "%Y%m%d"),
> ##D                                       pqao_code = "0660"
> ##D                                      )
> ##D          
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_qa_one_point_qc_by_pqao", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_qa_one_point_qc_by_site")
> ### * aqs_qa_one_point_qc_by_site
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_qa_one_point_qc_by_site
> ### Title: aqs_qa_one_point_qc_by_site
> ### Aliases: aqs_qa_one_point_qc_by_site
> 
> ### ** Examples
> 
> # returns a tibbble of One Point QC data for
>           #  ozone at the Truro National Seashore site (\#0002) in
>           #  Barnstable County, MA for January 2018:
>  ## Not run: 
> ##D aqs_qa_one_point_qc_by_site(parameter = "44201",
> ##D                                     bdate = as.Date("20180101",
> ##D                                                    format = "%Y%m%d"),
> ##D                                     edate = as.Date("20180131",
> ##D                                                    format = "%Y%m%d"),
> ##D                                     stateFIPS = "25",
> ##D                                     countycode = "001",
> ##D                                     sitenum = "0002"
> ##D                                     )
> ##D          
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_qa_one_point_qc_by_site", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_qa_one_point_qc_by_state")
> ### * aqs_qa_one_point_qc_by_state
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_qa_one_point_qc_by_state
> ### Title: aqs_qa_one_point_qc_by_state
> ### Aliases: aqs_qa_one_point_qc_by_state
> 
> ### ** Examples
> 
> # returns a tibble of one point QC check
>           #  data for ozone in Massachusettes in January 2018
>           ## Not run: 
> ##D aqs_qa_one_point_qc_by_state(parameter = "44201",
> ##D                                                 bdate = as.Date("20170101",
> ##D                                                             format = "%Y%m%d"
> ##D                                                                 ),
> ##D                                                 edate = as.Date("20190131",
> ##D                                                            format = "%Y%m%d"
> ##D                                                                ),
> ##D                                                 stateFIPS = "25"
> ##D                                                )
> ##D                    
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_qa_one_point_qc_by_state", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_qa_pep_audit_by_MA")
> ### * aqs_qa_pep_audit_by_MA
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_qa_pep_audit_by_MA
> ### Title: aqs_qa_pep_audit_by_MA
> ### Aliases: aqs_qa_pep_audit_by_MA
> 
> ### ** Examples
> 
> # returns a tibble of PEP audit data for
>           #  June 2017 where the Monitoring Agency is the Alabama Department
>           #  of Environmental Management (agency 0013)
>           ## Not run: 
> ##D aqs_qa_pep_audit_by_MA(parameter = "88101",
> ##D                                           bdate = as.Date("20170601",
> ##D                                                           format = "%Y%m%d"),
> ##D                                           edate = as.Date("20170630",
> ##D                                                           format = "%Y%m%d"),
> ##D                                           MA_code = "0013"
> ##D                                          )
> ##D                    
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_qa_pep_audit_by_MA", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_qa_pep_audit_by_county")
> ### * aqs_qa_pep_audit_by_county
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_qa_pep_audit_by_county
> ### Title: aqs_qa_pep_audit_by_county
> ### Aliases: aqs_qa_pep_audit_by_county
> 
> ### ** Examples
> 
> # returns a tibble with PEP Audit data for FRM
>           #  PM2.5 in Madison County, AL for 2017
>  ## Not run: 
> ##D aqs_qa_pep_audit_by_county_multiyear(parameter = "88101",
> ##D                                                bdate = as.Date("20150101",
> ##D                                                          format = "%Y%m%d"
> ##D                                                               ),
> ##D                                                edate = as.Date("20171231",
> ##D                                                            format = "%Y%m%d"
> ##D                                                               ),
> ##D                                                stateFIPS = "01",
> ##D                                                countycode = "089"
> ##D                                                )
> ##D           
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_qa_pep_audit_by_county", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_qa_pep_audit_by_pqao")
> ### * aqs_qa_pep_audit_by_pqao
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_qa_pep_audit_by_pqao
> ### Title: aqs_qa_pep_audit_by_pqao
> ### Aliases: aqs_qa_pep_audit_by_pqao
> 
> ### ** Examples
> 
> # returns a tibble of PEP audit data for
>   #  June 2017 where the pqao is the Alabama Department of
>   #  Environmental Management (agency 0013)
>   ## Not run: 
> ##D aqs_qa_pep_audit_by_pqao(parameter = "88101",
> ##D                                     bdate = as.Date("20170601",
> ##D                                                     format = "%Y%m%d"
> ##D                                                    ),
> ##D                                     edate = as.Date("20190630",
> ##D                                                     format = "%Y%m%d"),
> ##D                                     pqao_code = "0013"
> ##D                                     )
> ##D                    
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_qa_pep_audit_by_pqao", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_qa_pep_audit_by_site")
> ### * aqs_qa_pep_audit_by_site
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_qa_pep_audit_by_site
> ### Title: aqs_qa_pep_audit_by_site
> ### Aliases: aqs_qa_pep_audit_by_site
> 
> ### ** Examples
> 
> # returns a aqs_v2 S3 object of pep Audit data for FRM PM2.5
>           #  at the Huntsville Old Airport site (\#0014) in Madison County,
>           #  AL for 2017
>  ## Not run: 
> ##D aqs_qa_pep_audit_by_site(parameter = "88101",
> ##D                                    bdate = as.Date("20150101",
> ##D                                                    format = "%Y%m%d"),
> ##D                                    edate = as.Date("20171231",
> ##D                                                      format = "%Y%m%d"),
> ##D                                    stateFIPS = "01",
> ##D                                    countycode = "089",
> ##D                                    sitenum = "0014"
> ##D                                        )
> ##D            
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_qa_pep_audit_by_site", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_qa_pep_audit_by_state")
> ### * aqs_qa_pep_audit_by_state
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_qa_pep_audit_by_state
> ### Title: aqs_qa_pep_audit_by_state
> ### Aliases: aqs_qa_pep_audit_by_state
> 
> ### ** Examples
> 
> # returns a tibble of PEP audit data for PM2.5 in Alabama 2017
>           ## Not run: 
> ##D aqs_qa_pep_audit_by_state_multiyear(parameter="88101",
> ##D                                              bdate=as.Date("20160101",
> ##D                                                           format="%Y%m%d"),
> ##D                                              edate=as.Date("20171231",
> ##D                                                            format="%Y%m%d"),
> ##D                                              stateFIPS="01"
> ##D                                              )
> ##D                    
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_qa_pep_audit_by_state", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_removeheader")
> ### * aqs_removeheader
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_removeheader
> ### Title: aqs_removeheader
> ### Aliases: aqs_removeheader
> 
> ### ** Examples
> 
>           ## Not run:  AQSobject <- aqs_removeheader(AQSobject)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_removeheader", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_revisionhistory")
> ### * aqs_revisionhistory
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_revisionhistory
> ### Title: aqs_revisionhistory
> ### Aliases: aqs_revisionhistory
> 
> ### ** Examples
> 
>  # read the Data Mart API revision history
>  #  \dontrun{aqs_revisionHistory()}
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_revisionhistory", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_sampledata_by_box")
> ### * aqs_sampledata_by_box
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_sampledata_by_box
> ### Title: aqs_sampledata_by_box
> ### Aliases: aqs_sampledata_by_box
> 
> ### ** Examples
> 
> # returns a aqs_v2 S3 object containing all ozone samples
>              #  in the vicinity of central Alabama for
>              #  May 1, 2015 - May 2, 2017
>           ## Not run: 
> ##D aqs_sampledata_by_box(parameter = "44201",
> ##D                                          bdate = as.Date("20150501",
> ##D                                                          format = "%Y%m%d"),
> ##D                                          edate = as.Date("20170502",
> ##D                                                          format = "%Y%m%d"),
> ##D                                          minlat = "33.3",
> ##D                                          maxlat = "33.6",
> ##D                                          minlon = "-87.0",
> ##D                                          maxlon = "-86.7"
> ##D                                          )
> ##D                    
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_sampledata_by_box", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_sampledata_by_cbsa")
> ### * aqs_sampledata_by_cbsa
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_sampledata_by_cbsa
> ### Title: aqs_sampledata_by_cbsa
> ### Aliases: aqs_sampledata_by_cbsa
> 
> ### ** Examples
> 
> # returns an aqs_v2 s3 object which contains NO2 data
>           #  for Charlotte-Concord-Gastonia, NC cbsa for
>           #  Janurary 1, 2015 - Janurary 01, 2017
>           ## Not run: 
> ##D aqs_sampledata_by_cbsa(parameter = "42602",
> ##D                                           bdate = as.Date("20150101",
> ##D                                                           format = "%Y%m%d"),
> ##D                                           edate = as.Date("20170101",
> ##D                                                           format = "%Y%m%d"),
> ##D                                           cbsa_code = "16740"
> ##D                                          )
> ##D                    
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_sampledata_by_cbsa", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_sampledata_by_county")
> ### * aqs_sampledata_by_county
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_sampledata_by_county
> ### Title: aqs_sampledata_by_county
> ### Aliases: aqs_sampledata_by_county
> 
> ### ** Examples
> 
> # returns all FRM/FEM PM2.5 data for Wake County, NC between
>           #  January 1, 2015 - February 28, 2016
>  ## Not run: 
> ##D aqs_sampledata_by_county(parameter = "88101",
> ##D                                    bdate = as.Date("20150101",
> ##D                                                    format = "%Y%m%d"),
> ##D                                    edate=as.Date("20160228",
> ##D                                                    format = "%Y%m%d"),
> ##D                                    stateFIPS = "37",
> ##D                                    countycode = "183"
> ##D                                    )
> ##D          
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_sampledata_by_county", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_sampledata_by_site")
> ### * aqs_sampledata_by_site
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_sampledata_by_site
> ### Title: aqs_sampledata_by_site
> ### Aliases: aqs_sampledata_by_site
> 
> ### ** Examples
> 
> #Returns a AQS_Data Mart_APIv2 S3 object of ozone monitoring
>           #  data for the Millbrook School site (/#0014) in
>           #  Wake County, NC for June 18, 2017.
>  ## Not run: 
> ##D             aqs_sampledata_by_site(parameter = "44201",
> ##D                                    bdate = as.Date("20170618",
> ##D                                                    format = "%Y%m%d"),
> ##D                                    edate = as.Date("20190618",
> ##D                                                       format = "%Y%m%d"),
> ##D                                    stateFIPS = "37",
> ##D                                    countycode = "183",
> ##D                                    sitenum = "0014"
> ##D                                    )
> ##D          
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_sampledata_by_site", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_sampledata_by_state")
> ### * aqs_sampledata_by_state
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_sampledata_by_state
> ### Title: aqs_sampledata_by_state
> ### Aliases: aqs_sampledata_by_state
> 
> ### ** Examples
> 
> # returns an aqs_v2 S3 object with all benzene samples from
>           #  North Carolina collected from May 15th, 1995 - May 15, 1999
>           ## Not run: 
> ##D aqs_sampledata_by_state(parameter = "45201",
> ##D                                            bdate = as.Date("19950515",
> ##D                                                            format="%Y%m%d"
> ##D                                                            ),
> ##D                                            edate = as.Date("19990515",
> ##D                                                           format = "%Y%m%d"),
> ##D                                            stateFIPS = "37"
> ##D                                           )
> ##D                    
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_sampledata_by_state", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_sign_up")
> ### * aqs_sign_up
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_sign_up
> ### Title: aqs_sign_up
> ### Aliases: aqs_sign_up
> 
> ### ** Examples
> 
> # to register a new user or generate a new key with the email
>           #  address "John.Doe/@myemail.com"
>           ## Not run: aqs_sign_up(email = "John.Doe/@myemail.com")
>           #  after calling this function please follow the instructions that
>           #  are sent in the verification e-mail before proceeding.
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_sign_up", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_sites_by_county")
> ### * aqs_sites_by_county
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_sites_by_county
> ### Title: aqs_sites_by_county
> ### Aliases: aqs_sites_by_county
> 
> ### ** Examples
> 
> #returns an AQS_Data Mart_APIv2 S3 object witch returns all sites
>           #  in Hawaii County, HI
>           ## Not run: 
> ##D aqs_sites_by_county(stateFIPS = "15",
> ##D                                            countycode = "001")
> ##D                  
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_sites_by_county", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_states")
> ### * aqs_states
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_states
> ### Title: aqs_states
> ### Aliases: aqs_states
> 
> ### ** Examples
> 
> #returns a tibble of states and their FIPS codes
>           ## Not run: aqs_states()
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_states", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_transactionsample_by_MA")
> ### * aqs_transactionsample_by_MA
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_transactionsample_by_MA
> ### Title: aqs_transactionsample_MA
> ### Aliases: aqs_transactionsample_by_MA
> 
> ### ** Examples
> 
> #Returns a AQS_Data Mart_APIv2 S3 object of
>          ## Not run: 
> ##D  #   all ozone transaction sample data for all monitors
> ##D                    #   operated by South Coast Air Quality Management
> ##D                    #   District collected on May 15, 2015
> ##D                    #   North Carolina on May 15, 1995
> ##D                    aqs_transactionsample_by_MA(parameter = "44201",
> ##D                                                  bdate = as.Date("20150515",
> ##D                                                          format = "%Y%m%d"),
> ##D                                                  edate = as.Date("20150515",
> ##D                                                           format = "%Y%m%d"),
> ##D                                                  MA_code = "0972"
> ##D                                                  )
> ##D                  
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_transactionsample_by_MA", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_transactionsample_by_county")
> ### * aqs_transactionsample_by_county
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_transactionsample_by_county
> ### Title: aqs_transactionsample_by_county
> ### Aliases: aqs_transactionsample_by_county
> 
> ### ** Examples
> 
> #Returns a AQS_Data Mart_APIv2 S3 object of the returns
>          ## Not run: 
> ##D  #   returns all FRM/FEM transaction data for
> ##D                    #   Wake County, NC between January and February 2016
> ##D                    aqs_transactionsample_by_county(parameter = "88101",
> ##D                                                  bdate = as.Date("20160228",
> ##D                                                          format = "%Y%m%d"),
> ##D                                                  edate = as.Date("20160228",
> ##D                                                           format = "%Y%m%d"),
> ##D                                                  stateFIPS = "37",
> ##D                                                  countycode = "183"
> ##D                                                  )
> ##D                  
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_transactionsample_by_county", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_transactionsample_by_site")
> ### * aqs_transactionsample_by_site
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_transactionsample_by_site
> ### Title: aqs_transactionsample_by_site
> ### Aliases: aqs_transactionsample_by_site
> 
> ### ** Examples
> 
> #Returns a AQS_Data Mart_APIv2 S3 object of the returns
>          ## Not run: 
> ##D  #   returns all ozone transaction data for the
> ##D                    #   Millbrook School site (#0014) in Wake County, NC for
> ##D                    #   June 18, 2017
> ##D                    aqs_transactionsample_by_site(parameter = "44201",
> ##D                                                  bdate = as.Date("20170618",
> ##D                                                          format = "%Y%m%d"),
> ##D                                                  edate = as.Date("20170618",
> ##D                                                           format = "%Y%m%d"),
> ##D                                                  stateFIPS = "37",
> ##D                                                  countycode = "183",
> ##D                                                  sitenum = "0014"
> ##D                                                  )
> ##D                  
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_transactionsample_by_site", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aqs_transactionsample_by_state")
> ### * aqs_transactionsample_by_state
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aqs_transactionsample_by_state
> ### Title: aqs_transactionsample_by_state
> ### Aliases: aqs_transactionsample_by_state
> 
> ### ** Examples
> 
> #Returns a AQS_Data Mart_APIv2 S3 object of
>          ## Not run: 
> ##D  #   all benzene transaction sample data for
> ##D                    #   North Carolina on May 15, 1995
> ##D                    aqs_transactionsample_by_state(parameter = "45201",
> ##D                                                  bdate = as.Date("19950515",
> ##D                                                          format = "%Y%m%d"),
> ##D                                                  edate = as.Date("19950515",
> ##D                                                           format = "%Y%m%d"),
> ##D                                                  stateFIPS = "37"
> ##D                                                  )
> ##D                  
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aqs_transactionsample_by_state", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  5.47 0.71 6.58 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
